// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  username      String   @unique
  email         String   @unique
  passwordHash  String?
  oauthProvider String?
  avatarUrl     String?
  bio           String?
  roles         Role[]   @default([USER])
  isVerified    Boolean  @default(false)
  isBanned     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  lastLogin     DateTime?

  // Relations
  reviews       Review[]
  comments      Comment[]
  votes         Vote[]
  lists         List[]
  reports       Report[]
  auditLogs     AuditLog[]
  followers     Follow[]  @relation("UserFollowers")
  following     Follow[]  @relation("UserFollowing")

  @@map("users")
}

model Game {
  id                  String   @id @default(cuid())
  slug                String   @unique
  title               String
  descriptionMd       String?
  releaseDate         DateTime?
  developer           String?
  publisher           String?
  genres              String[]
  tags                String[]
  platforms           String[]
  coverUrl            String?
  screenshots         Json?    // Array of URLs
  trailerUrl          String?
  systemRequirements  Json?    // Min/Recommended specs
  esrbRating          String?
  metacriticUrl       String?
  criticScore         Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  reviews             Review[]
  listItems           ListItem[]

  @@map("games")
}

model Review {
  id                String   @id @default(cuid())
  userId            String
  gameId            String
  rating            Float    // 0-10 with 0.5 increments
  bodyMd            String
  pros              String[]
  cons              String[]
  playtimeHours     Int?
  containsSpoilers  Boolean  @default(false)
  upvotesCount      Int      @default(0)
  downvotesCount    Int      @default(0)
  status            ReviewStatus @default(PUBLISHED)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game              Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  comments          Comment[]

  @@map("reviews")
}

model Comment {
  id        String   @id @default(cuid())
  reviewId  String
  userId    String
  bodyMd    String
  status    CommentStatus @default(PUBLISHED)
  createdAt DateTime @default(now())

  // Relations
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Vote {
  id         String   @id @default(cuid())
  userId     String
  targetType VoteTargetType
  targetId   String
  value      Int      // +1 or -1
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, targetType, targetId])
  @@map("votes")
}

model List {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  visibility  ListVisibility @default(PRIVATE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       ListItem[]

  @@map("lists")
}

model ListItem {
  id       String @id @default(cuid())
  listId   String
  gameId   String
  addedAt  DateTime @default(now())

  // Relations
  list     List @relation(fields: [listId], references: [id], onDelete: Cascade)
  game     Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([listId, gameId])
  @@map("list_items")
}

model Report {
  id         String   @id @default(cuid())
  reporterId String
  targetType ReportTargetType
  targetId   String
  reason     String
  notes      String?
  status     ReportStatus @default(PENDING)
  createdAt  DateTime @default(now())
  resolvedBy String?
  resolvedAt DateTime?

  // Relations
  reporter   User     @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model AuditLog {
  id         String   @id @default(cuid())
  actorId    String
  action     String
  targetType String
  targetId   String
  metaJson   Json?
  createdAt  DateTime @default(now())

  // Relations
  actor      User     @relation(fields: [actorId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

model Follow {
  followerId String
  followeeId String
  createdAt  DateTime @default(now())

  // Relations
  follower   User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followee   User     @relation("UserFollowing", fields: [followeeId], references: [id], onDelete: Cascade)

  @@id([followerId, followeeId])
  @@map("follows")
}

// Enums
enum Role {
  USER
  VERIFIED
  MODERATOR
  ADMIN
}

enum ReviewStatus {
  PUBLISHED
  FLAGGED
  REMOVED
}

enum CommentStatus {
  PUBLISHED
  FLAGGED
  REMOVED
}

enum VoteTargetType {
  REVIEW
  COMMENT
}

enum ListVisibility {
  PRIVATE
  PUBLIC
  UNLISTED
}

enum ReportTargetType {
  REVIEW
  COMMENT
  USER
}

enum ReportStatus {
  PENDING
  RESOLVED
  DISMISSED
}
